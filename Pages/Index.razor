@page "/"
@using Database
@using System.Web
@using System.Text.RegularExpressions
@using log4net

@inject AddressesContext context

<PageTitle>Last Sold Prices</PageTitle>

<h1>Last Sold Prices</h1>
<div class="container">

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    <div class="form-group">
        <label>Post Code:</label>
        <input class="form-control" style="text-transform: uppercase;" @bind-value="PostCode" />
    </div>
    <button class="btn btn-primary" @onclick="LoadPrices">Load Prices</button>


    <table class="table">
        <thead>
            <tr>
                <th>Address</th>
                <th class="number">Last Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var address in Addresses) {
                <tr>
                    <td class="multiline">@address.FormattedAddress</td>
                    <td class="number">@address.LastSoldPrice</td>
                </tr>
            }
        </tbody>
    </table>

    @if (!string.IsNullOrWhiteSpace(MapUrl))
    {
        <div class="mapouter"><div class="gmap_canvas"><iframe width="600" height="500" id="gmap_canvas" src="@MapUrl" frameborder="0" scrolling="no" marginheight="0" marginwidth="0"></iframe><a href="https://fmovies-online.net">fmovies</a><br><style>.mapouter{position:relative;text-align:right;height:500px;width:600px;}</style><a href="https://www.embedgooglemap.net">google map on your website</a><style>.gmap_canvas {overflow:hidden;background:none!important;height:500px;width:600px;}</style></div></div>
    }


</div>


@code {
    string? PostCode;
    Address[] Addresses = new Address[0];
    string? MapUrl;

    ILog logger = LogManager.GetLogger("Index");

    string? ErrorMessage;

    // Pattern taken from https://stackoverflow.com/questions/164979/regex-for-matching-uk-postcodes
    Regex postcodePattern = new Regex(@"^([A-Z][A-HJ-Y]?\d[A-Z\d]? ?\d[A-Z]{2}|GIR ?0A{2})$", RegexOptions.IgnoreCase);


    void LoadPrices()
    {
        try
        {
            ErrorMessage = null;
            MapUrl = null;
            Addresses = new Address[0];
            if (string.IsNullOrWhiteSpace(PostCode) || !PostCodeValid())
            {
                ErrorMessage = $"Invalid Postcode '{PostCode?.ToUpper()}'";
                return;
            }

            Addresses = context.Addresses!.Where(a => a.PostCodeIndex!.StartsWith(PostCode!.Replace(" ", "").ToUpper())).OrderBy(a => a.PostCodeIndex).ThenByDescending(a => a.LastSoldPrice).ToArray();
            logger.Debug($"Read {Addresses.Length} addresses for {PostCode}");

            MapUrl = $"https://maps.google.com/maps?q={HttpUtility.UrlEncode(PostCode)}&t=&z=13&ie=UTF8&iwloc=&output=embed";
        }
        catch (Exception ex)
        {
            logger.Error("Failure reading addresses", ex);
            ErrorMessage = ex.Message;
        }
        finally
        {
            _ = InvokeAsync(StateHasChanged);
        }
    }

    bool PostCodeValid() => postcodePattern.IsMatch(PostCode!);
}